# 1. 此 workflow 使用预编写指令为纯净 Ubuntu 开发环境安装最新版 Google Chrome 以及对应版本的 ChromeDriver
# 2. 此 workflow 使用 env 环境变量定位 build.py 安装脚本 以及 main.py 脚手架接口，若您的工程路径与默认配置不符请适当修改
name: V2RSS Probe

#   schedule 定时任务触发器 默认值 - cron: '25 * * * *' 表示为每 25 分钟执行一次
#   一般情况下不建议使用 GitHub Actions 部署 v2rss-server，仅在你缺少可用 VPS 时在此构建服务
on:
  push:
    branches: [ unused ]
  # schedule:
  #   - cron: '25 * * * *'

jobs:
  build:
    # ============================================
    # TODO [√] 指定 Workflows 操作系统
    # ============================================
    # 务必选择 ubuntu-latest 以最高效率执行工作流，
    runs-on: ubuntu-latest

    # ============================================
    # TODO [√] 指定 Workflows 脚手架路径及必要启动参数
    # ============================================
    env:
      # 环境初始化脚本的相对路径 such as V2RaycSpider1225/build.py
      BUILDER: V2RaycSpider1225/build.py
      # 脚手架接口文件的相对路径 such as V2RaycSpider1225/main.py
      SCAFFOLD: V2RaycSpider1225/main.py
      # V2RSS 项目依赖文件的相对路径 such as V2RaycSpider1225/requirements.txt
      REQUIREMENTS: V2RaycSpider1225/requirements.txt
      # UAtheK1nG 读取 Secret Key 覆盖 RedisMaster 配置
      UAtheK1nG: ${{ secrets.UAtheK1nG }}
    # ============================================
    # TODO [√] 检查工作分支及 Workflows 运行环境
    # ============================================
    steps:
      - uses: actions/checkout@v2

      # ============================================
      # TODO [√] 创建 Python3.6+ 编译环境
      # ============================================
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      # ============================================
      # TODO [√] 安装 Project 第三方依赖
      # ============================================
      # 拉取 requirement
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f ${{ env.REQUIREMENTS }} ]; then pip install -r ${{ env.REQUIREMENTS }}; fi
      # 1. 拉取最新版 Chrome 并适配对应版本的 ChromeDriver
      # 2. 初始化工作目录
      - name: V2RSS setup
        run: |
          if [ -e ${{ env.BUILDER }} ]; then python ${{ env.BUILDER }}; fi
          if [ -e ${{ env.SCAFFOLD }} ]; then python ${{ env.SCAFFOLD }} build; fi
      # ============================================
      # TODO [√] 测试 Scaffold 脚手架指令
      # ============================================
      # 执行一次数据库连接作业，检查相关配置信息是否填写正确
      - name: V2RSS ping
        run: |
          if [ -e ${{ env.SCAFFOLD }} ]; then python ${{ env.SCAFFOLD }} ping; fi
      # 执行一次清洗作业，检查订阅监听模块是否正常工作
      - name: V2RSS overdue/decouple
        run: |
          if [ -e ${{ env.SCAFFOLD }} ]; then python ${{ env.SCAFFOLD }} overdue; fi
          if [ -e ${{ env.SCAFFOLD }} ]; then python ${{ env.SCAFFOLD }} --env=production decouple; fi
      # 执行一次采集作业，检查采集模块是否正常工作；使用 Spawn 指令可不受限制地采集订阅
      - name: V2RSS spawn
        run: |
          if [ -e ${{ env.SCAFFOLD }} ]; then python ${{ env.SCAFFOLD }} spawn; fi
